{"ast":null,"code":"\n\n// import React, { useEffect, useState } from \"react\";\n// import { getTransactions, addTransaction, deleteTransaction, updateTransaction } from \"./api\"; // ⚡ include updateTransaction\n// import { PieChart, Pie, Cell, Tooltip, Legend } from \"recharts\";\n// import Swal from \"sweetalert2\"; // ⚡ import SweetAlert2\n// import \"./App.css\";\n\n// function App() {\n//   const [transactions, setTransactions] = useState([]);\n//   const [form, setForm] = useState({ title: \"\", amount: \"\", type: \"expense\", category: \"\" });\n//   const [editingId, setEditingId] = useState(null); // ⚡ track editing\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     const res = await getTransactions();\n//     setTransactions(res.data);\n//   };\n\n//   const handleSubmit = async (e) => {\n//   e.preventDefault();\n//   if (!form.title || !form.amount || !form.category) return;\n\n//   if (editingId) {\n//     // ⚡ confirm before updating\n//     Swal.fire({\n//       title: \"Update Transaction?\",\n//       text: \"Do you want to save the changes to this transaction?\",\n//       icon: \"question\",\n//       showCancelButton: true,\n//       confirmButtonColor: \"#28a745\",\n//       cancelButtonColor: \"#6c757d\",\n//       confirmButtonText: \"Yes, update it!\",\n//       cancelButtonText: \"Cancel\"\n//     }).then(async (result) => {\n//       if (result.isConfirmed) {\n//         await updateTransaction(editingId, form);\n//         setEditingId(null);\n//         setForm({ title: \"\", amount: \"\", type: \"expense\", category: \"\" });\n//         fetchData();\n//         Swal.fire(\"Updated!\", \"Transaction updated successfully.\", \"success\");\n//       }\n//     });\n//   } else {\n//     // ⚡ add new transaction directly\n//     await addTransaction(form);\n//     setForm({ title: \"\", amount: \"\", type: \"expense\", category: \"\" });\n//     fetchData();\n//   }\n// };\n\n//   const handleDelete = async (id) => {\n//   Swal.fire({\n//     title: \"Are you sure?\",\n//     text: \"This transaction will be permanently deleted!\",\n//     icon: \"warning\",\n//     showCancelButton: true,\n//     confirmButtonColor: \"#d33\",\n//     cancelButtonColor: \"#3085d6\",\n//     confirmButtonText: \"Yes, delete it!\",\n//     cancelButtonText: \"Cancel\"\n//   }).then(async (result) => {\n//     if (result.isConfirmed) {\n//       await deleteTransaction(id);\n//       fetchData();\n//       Swal.fire(\"Deleted!\", \"The transaction has been deleted.\", \"success\");\n//     }\n//   });\n// };\n\n//   const handleEdit = (transaction) => {\n//     setForm({\n//       title: transaction.title,\n//       amount: transaction.amount,\n//       type: transaction.type,\n//       category: transaction.category,\n//     });\n//     setEditingId(transaction._id);\n//   };\n\n//   // ---- Totals ----\n//   const totalIncome = transactions\n//     .filter(t => t.type === \"income\")\n//     .reduce((sum, t) => sum + t.amount, 0);\n\n//   const totalExpense = transactions\n//     .filter(t => t.type === \"expense\")\n//     .reduce((sum, t) => sum + t.amount, 0);\n\n//   const balance = totalIncome - totalExpense;\n\n//   // ---- Expense Categories ----\n//   const expenseData = Object.values(\n//     transactions\n//       .filter(t => t.type === \"expense\")\n//       .reduce((acc, t) => {\n//         acc[t.category] = acc[t.category] || { name: t.category, value: 0 };\n//         acc[t.category].value += t.amount;\n//         return acc;\n//       }, {})\n//   );\n\n//   // ---- Income vs Expense ----\n//   const summaryData = [\n//     { name: \"Income\", value: totalIncome },\n//     { name: \"Expense\", value: totalExpense }\n//   ];\n\n//   const COLORS = [\"#0088FE\", \"#FF8042\", \"#00C49F\", \"#FFBB28\", \"#FF6384\"];\n\n//   return (\n//     <div className=\"container\">\n//       <h1 className=\"title\">Expense Tracker</h1>\n\n//       {/* Summary Cards */}\n//       <div className=\"summary\">\n//         <div className=\"card income\">Income: {totalIncome}</div>\n//         <div className=\"card expense\">Expense: {totalExpense}</div>\n//         <div className=\"card balance\">Balance: {balance}</div>\n//       </div>\n\n//       {/* Form */}\n//       <form className=\"form\" onSubmit={handleSubmit}>\n//         <input\n//           placeholder=\"Title\"\n//           value={form.title}\n//           onChange={e => setForm({ ...form, title: e.target.value })}\n//         />\n//         <input\n//           placeholder=\"Amount\"\n//           type=\"number\"\n//           value={form.amount}\n//           onChange={e => setForm({ ...form, amount: Number(e.target.value) })}\n//         />\n//         <select\n//           value={form.type}\n//           onChange={e => setForm({ ...form, type: e.target.value })}\n//         >\n//           <option value=\"expense\">Expense</option>\n//           <option value=\"income\">Income</option>\n//         </select>\n//         <input\n//           placeholder=\"Category\"\n//           value={form.category}\n//           onChange={e => setForm({ ...form, category: e.target.value })}\n//         />\n//         <button className=\"btn\" type=\"submit\">\n//           {editingId ? \"Update\" : \"Add\"} {/* ⚡ dynamic button */}\n//         </button>\n//       </form>\n\n//       {/* Transactions Table */}\n//       <table className=\"transaction-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Amount</th>\n//             <th>Category</th>\n//             <th>Type</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {transactions.map(t => (\n//             <tr key={t._id} className={t.type}>\n//               <td>{t.title}</td>\n//               <td>{t.amount}</td>\n//               <td>{t.category}</td>\n//               <td>{t.type}</td>\n//               <td>\n//                 <button className=\"edit-btn\" onClick={() => handleEdit(t)}>✏️</button>\n//                 <button className=\"delete-btn\" onClick={() => handleDelete(t._id)}>❌</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Charts */}\n//       <h2>Category Breakdown (Expenses)</h2>\n//       <div className=\"chart\">\n//         <PieChart width={400} height={300}>\n//           <Pie data={expenseData} dataKey=\"value\" nameKey=\"name\" outerRadius={120}>\n//             {expenseData.map((entry, index) => (\n//               <Cell key={index} fill={COLORS[index % COLORS.length]} />\n//             ))}\n//           </Pie>\n//           <Tooltip />\n//           <Legend />\n//         </PieChart>\n//       </div>\n\n//       <h2>Income vs Expense</h2>\n//       <div className=\"chart\">\n//         <PieChart width={400} height={300}>\n//           <Pie data={summaryData} dataKey=\"value\" nameKey=\"name\" outerRadius={120}>\n//             {summaryData.map((entry, index) => (\n//               <Cell key={index} fill={COLORS[index % COLORS.length]} />\n//             ))}\n//           </Pie>\n//           <Tooltip />\n//           <Legend />\n//         </PieChart>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;","map":{"version":3,"names":[],"sources":["D:/ALL PROJECTS/expense-tracker/frontend/src/App.js"],"sourcesContent":["\n\n// import React, { useEffect, useState } from \"react\";\n// import { getTransactions, addTransaction, deleteTransaction, updateTransaction } from \"./api\"; // ⚡ include updateTransaction\n// import { PieChart, Pie, Cell, Tooltip, Legend } from \"recharts\";\n// import Swal from \"sweetalert2\"; // ⚡ import SweetAlert2\n// import \"./App.css\";\n\n// function App() {\n//   const [transactions, setTransactions] = useState([]);\n//   const [form, setForm] = useState({ title: \"\", amount: \"\", type: \"expense\", category: \"\" });\n//   const [editingId, setEditingId] = useState(null); // ⚡ track editing\n\n//   useEffect(() => {\n//     fetchData();\n//   }, []);\n\n//   const fetchData = async () => {\n//     const res = await getTransactions();\n//     setTransactions(res.data);\n//   };\n\n//   const handleSubmit = async (e) => {\n//   e.preventDefault();\n//   if (!form.title || !form.amount || !form.category) return;\n\n//   if (editingId) {\n//     // ⚡ confirm before updating\n//     Swal.fire({\n//       title: \"Update Transaction?\",\n//       text: \"Do you want to save the changes to this transaction?\",\n//       icon: \"question\",\n//       showCancelButton: true,\n//       confirmButtonColor: \"#28a745\",\n//       cancelButtonColor: \"#6c757d\",\n//       confirmButtonText: \"Yes, update it!\",\n//       cancelButtonText: \"Cancel\"\n//     }).then(async (result) => {\n//       if (result.isConfirmed) {\n//         await updateTransaction(editingId, form);\n//         setEditingId(null);\n//         setForm({ title: \"\", amount: \"\", type: \"expense\", category: \"\" });\n//         fetchData();\n//         Swal.fire(\"Updated!\", \"Transaction updated successfully.\", \"success\");\n//       }\n//     });\n//   } else {\n//     // ⚡ add new transaction directly\n//     await addTransaction(form);\n//     setForm({ title: \"\", amount: \"\", type: \"expense\", category: \"\" });\n//     fetchData();\n//   }\n// };\n\n\n//   const handleDelete = async (id) => {\n//   Swal.fire({\n//     title: \"Are you sure?\",\n//     text: \"This transaction will be permanently deleted!\",\n//     icon: \"warning\",\n//     showCancelButton: true,\n//     confirmButtonColor: \"#d33\",\n//     cancelButtonColor: \"#3085d6\",\n//     confirmButtonText: \"Yes, delete it!\",\n//     cancelButtonText: \"Cancel\"\n//   }).then(async (result) => {\n//     if (result.isConfirmed) {\n//       await deleteTransaction(id);\n//       fetchData();\n//       Swal.fire(\"Deleted!\", \"The transaction has been deleted.\", \"success\");\n//     }\n//   });\n// };\n\n//   const handleEdit = (transaction) => {\n//     setForm({\n//       title: transaction.title,\n//       amount: transaction.amount,\n//       type: transaction.type,\n//       category: transaction.category,\n//     });\n//     setEditingId(transaction._id);\n//   };\n\n//   // ---- Totals ----\n//   const totalIncome = transactions\n//     .filter(t => t.type === \"income\")\n//     .reduce((sum, t) => sum + t.amount, 0);\n\n//   const totalExpense = transactions\n//     .filter(t => t.type === \"expense\")\n//     .reduce((sum, t) => sum + t.amount, 0);\n\n//   const balance = totalIncome - totalExpense;\n\n//   // ---- Expense Categories ----\n//   const expenseData = Object.values(\n//     transactions\n//       .filter(t => t.type === \"expense\")\n//       .reduce((acc, t) => {\n//         acc[t.category] = acc[t.category] || { name: t.category, value: 0 };\n//         acc[t.category].value += t.amount;\n//         return acc;\n//       }, {})\n//   );\n\n//   // ---- Income vs Expense ----\n//   const summaryData = [\n//     { name: \"Income\", value: totalIncome },\n//     { name: \"Expense\", value: totalExpense }\n//   ];\n\n//   const COLORS = [\"#0088FE\", \"#FF8042\", \"#00C49F\", \"#FFBB28\", \"#FF6384\"];\n\n//   return (\n//     <div className=\"container\">\n//       <h1 className=\"title\">Expense Tracker</h1>\n\n//       {/* Summary Cards */}\n//       <div className=\"summary\">\n//         <div className=\"card income\">Income: {totalIncome}</div>\n//         <div className=\"card expense\">Expense: {totalExpense}</div>\n//         <div className=\"card balance\">Balance: {balance}</div>\n//       </div>\n\n//       {/* Form */}\n//       <form className=\"form\" onSubmit={handleSubmit}>\n//         <input\n//           placeholder=\"Title\"\n//           value={form.title}\n//           onChange={e => setForm({ ...form, title: e.target.value })}\n//         />\n//         <input\n//           placeholder=\"Amount\"\n//           type=\"number\"\n//           value={form.amount}\n//           onChange={e => setForm({ ...form, amount: Number(e.target.value) })}\n//         />\n//         <select\n//           value={form.type}\n//           onChange={e => setForm({ ...form, type: e.target.value })}\n//         >\n//           <option value=\"expense\">Expense</option>\n//           <option value=\"income\">Income</option>\n//         </select>\n//         <input\n//           placeholder=\"Category\"\n//           value={form.category}\n//           onChange={e => setForm({ ...form, category: e.target.value })}\n//         />\n//         <button className=\"btn\" type=\"submit\">\n//           {editingId ? \"Update\" : \"Add\"} {/* ⚡ dynamic button */}\n//         </button>\n//       </form>\n\n//       {/* Transactions Table */}\n//       <table className=\"transaction-table\">\n//         <thead>\n//           <tr>\n//             <th>Title</th>\n//             <th>Amount</th>\n//             <th>Category</th>\n//             <th>Type</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {transactions.map(t => (\n//             <tr key={t._id} className={t.type}>\n//               <td>{t.title}</td>\n//               <td>{t.amount}</td>\n//               <td>{t.category}</td>\n//               <td>{t.type}</td>\n//               <td>\n//                 <button className=\"edit-btn\" onClick={() => handleEdit(t)}>✏️</button>\n//                 <button className=\"delete-btn\" onClick={() => handleDelete(t._id)}>❌</button>\n//               </td>\n//             </tr>\n//           ))}\n//         </tbody>\n//       </table>\n\n//       {/* Charts */}\n//       <h2>Category Breakdown (Expenses)</h2>\n//       <div className=\"chart\">\n//         <PieChart width={400} height={300}>\n//           <Pie data={expenseData} dataKey=\"value\" nameKey=\"name\" outerRadius={120}>\n//             {expenseData.map((entry, index) => (\n//               <Cell key={index} fill={COLORS[index % COLORS.length]} />\n//             ))}\n//           </Pie>\n//           <Tooltip />\n//           <Legend />\n//         </PieChart>\n//       </div>\n\n//       <h2>Income vs Expense</h2>\n//       <div className=\"chart\">\n//         <PieChart width={400} height={300}>\n//           <Pie data={summaryData} dataKey=\"value\" nameKey=\"name\" outerRadius={120}>\n//             {summaryData.map((entry, index) => (\n//               <Cell key={index} fill={COLORS[index % COLORS.length]} />\n//             ))}\n//           </Pie>\n//           <Tooltip />\n//           <Legend />\n//         </PieChart>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default App;\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}